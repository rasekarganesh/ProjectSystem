@page "/"
@using Projektsystem.BlazorApp.Data;
@using TabBlazor
@inject IStringLocalizer<Index> loc;
@inject IProjectRepository ProjectService;
@inject SocialAuthenticationProvider AuthenticationStateProvider

<Microsoft.AspNetCore.Components.Web.PageTitle> @loc["Home"] </Microsoft.AspNetCore.Components.Web.PageTitle>

<!-- Page header -->
<div class="page-header d-print-none">
    <div class="container-xl">
        <div class="row g-2 align-items-center mt-1">
            <div class="col">
                <!-- Page pre-title -->
                <h2 class="page-title">
                    @loc["Home"]
                </h2>
            </div>

            <!-- Page title actions -->
            <div class="col-auto ms-auto d-print-none">
                <div class="btn-list">
                    <span>Last Login</span>
                    <Icon IconType="@TablerIcons.Clock_2" />
                    @AuditLogService.GetUserLastLogin(AuthenticationStateProvider.CurrentUser.Id)
                </div>
            </div>
        </div>
    </div>
</div>
<div class="page-body">
    <div class="container-xl">

        <Row class="mt-1 row-deck row-cards">
            <RowCol Sm="12" Md="6" Lg="3">
                <Card Size="CardSize.Small">
                    <CardBody class="d-flex align-items-center">
                        <span class="bg-green text-white stamp me-3">
                            <Icon IconType="@TablerIcons.Brand_producthunt" />
                        </span>
                        <div class="me-3 lh-sm">
                            <div class="strong">
                                @projects.Where(i => i.Status == Model.Status.Open).Count()
                            </div>
                            <div class="text-muted">@loc["Open Projects"]</div>
                        </div>
                    </CardBody>
                </Card>
            </RowCol>
            <RowCol Sm="12" Md="6" Lg="3">
                <Card Size="CardSize.Small">
                    <CardBody class="d-flex align-items-center">
                        <span class="bg-blue text-white stamp me-3">
                            <Icon IconType="@TablerIcons.Currency_dollar" />
                        </span>
                        <div class="me-3 lh-sm">
                            <div class="strong">
                                @projects.Where(i => i.Status == Model.Status.Closed).Count()
                            </div>
                            <div class="text-muted">@loc["Closed Projects"]</div>
                        </div>
                    </CardBody>
                </Card>
            </RowCol>
            <RowCol Sm="12" Md="6" Lg="3">
                <Card Size="CardSize.Small">
                    <CardBody class="d-flex align-items-center">
                        <span class="bg-red text-white stamp me-3">
                            <Icon IconType="@TablerIcons.Shopping_cart" />
                        </span>
                        <div class="me-3 lh-sm">
                            <div class="strong">
                                @projects.Where(i => i.Status == Model.Status.New).Count()
                            </div>
                            <div class="text-muted">@loc["New Projects"]</div>
                        </div>
                    </CardBody>
                </Card>
            </RowCol>
            <RowCol Sm="12" Md="6" Lg="3">
                <Card Size="CardSize.Small">
                    <CardBody class="d-flex align-items-center">
                        <span class="bg-green text-white stamp me-3">
                            <Icon IconType="@TablerIcons.Adjustments_dollar" />
                        </span>
                        <div class="me-3 lh-sm">
                            <div class="strong">
                                @projects.Where(i => i.Status == Model.Status.Paused).Count()
                            </div>
                            <div class="text-muted">@loc["Hold Projects"]</div>
                        </div>
                    </CardBody>
                </Card>
            </RowCol>


        </Row>
        <Row class="mt-1 row-deck row-cards">
            <Table Item="ProjectDashBoard" Items="projects" PageSize="10"
                   Hover Responsive>
                <HeaderTemplate>
                    <strong> @loc["Projects"]</strong>
                </HeaderTemplate>

                <ChildContent>

                    <Column Item="ProjectDashBoard" Property="e=>e.Name" Title=@loc["Project Name"] Sortable Groupable>

                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.ForCompanyName" Title=@loc["For Company"] Sortable Groupable>
                        <Template>
                            <Status BackgroundColor="TablerColor.Green">
                                @context.ForCompanyName
                            </Status>
                        </Template>
                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.ByCompanyName" Title=@loc["By Company"] Sortable Groupable>
                        <Template>
                            <Status BackgroundColor="TablerColor.Blue">
                                @context.ByCompanyName
                            </Status>
                        </Template>
                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.ActualCost" Title="Actual Cost" Sortable>
                        <Template>
                            $@context.ActualCost.ToString("N0")
                        </Template>
                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.CostEstimate" Title="Cost Estimate" Sortable>
                        <Template>
                            $@context.CostEstimate.ToString("N0")
                        </Template>
                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.EarlyCostEstimate" Title="Early Cost Estimate" Sortable>
                        <Template>
                            $@context.EarlyCostEstimate.ToString("N0")
                        </Template>
                    </Column>
                    <Column Item="ProjectDashBoard" Property="e=>e.Status" Title=@loc["Status"] Sortable Groupable>
                        <Template>
                            @if (context.Status == Model.Status.New)
                            {
                                <Badge BackgroundColor="TablerColor.Green">@context.Status</Badge>
                            }
                            else
                            {
                                <Badge BackgroundColor="TablerColor.Red">@context.Status</Badge>
                            }
                        </Template>
                    </Column>
                </ChildContent>
            </Table>
        </Row>
    </div>
</div>

@code {

    @inject IAuditLogRepository AuditLogService;
    @inject IBudgetRepository BudgetService;

    private List<ProjectDashBoard> projects = new List<ProjectDashBoard>();
    protected override void OnInitialized()
    {
        LanguageNotifier.SubscribeLanguageChange(this);
        GetAllProjects();
    }
    //  public void Dispose() => LanguageNotifier.UnsubscribeLanguageChange(this);


    private void GetAllProjects()
    {
        var projs = ProjectService.GetAll().ToList();
        foreach (var pro in projs)
        {
            var pDB = new ProjectDashBoard();
            pDB.Name = pro.Name;
            pDB.ForCompanyName = pro.ForCompanyName;
            pDB.ByCompanyName = pro.ByCompanyName;
            pDB.Status = pro.Status;
            var budgets = BudgetService.GetAll().Where(i => i.ProjectId == pro.Id).ToList();
            foreach (var bud in budgets)
            {
                pDB.CostEstimate += bud.CostEstimate;
                pDB.EarlyCostEstimate += bud.EarlyCostEstimate;
                pDB.ActualCost += bud.ActualCost;
            }
            projects.Add(pDB);
        }
    }

    private class ProjectDashBoard : Project
    {
        public decimal EarlyCostEstimate { get; set; }
        public decimal CostEstimate { get; set; }
        public decimal ActualCost { get; set; }
    }
}